@model IPageModel

@{
    var routeValues = Context.Request.RouteValues.ToDictionary(d => d.Key, d => d.Value);
    foreach (var entry in Context.Request.Query)
    {
        routeValues[entry.Key] = entry.Value;
    }

    int span = 3;
}

<nav>
    <ul class="pagination">
        <li class="page-item">
            @{ routeValues["page"] = 1; }
            <a class="page-link" href="@Url.RouteUrl(routeValues)">First</a>
        </li>
        @if (Model.Page - span >= 1)
        {
            <li class="page-item">
                @{ routeValues["page"] = Model.Page - span; }
                <a class="page-link" href="@Url.RouteUrl(routeValues)" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                    <span class="sr-only">Previous</span>
                </a>
            </li>
        }
        @for (int page = Model.Page - span + 1; page < Model.Page + span; page++)
        {
            if (page >= 1 && page <= Model.TotalPages)
            {
                <li class="page-item @(Model.Page == page ? "active" : string.Empty)">
                    @{ routeValues["page"] = page; }
                    <a class="page-link" href="@Url.RouteUrl(routeValues)">@(page)</a>
                </li>
            }
        }
        @if (Model.Page + span <= Model.TotalPages)
        {
            <li class="page-item">
                @{ routeValues["page"] = Model.Page + span; }
                <a class="page-link" href="@Url.RouteUrl(routeValues)" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                    <span class="sr-only">Next</span>
                </a>
            </li>
        }
        <li class="page-item">
            @{ routeValues["page"] = Model.TotalPages; }
            <a class="page-link" href="@Url.RouteUrl(routeValues)">Last</a>
        </li>
    </ul>
</nav>